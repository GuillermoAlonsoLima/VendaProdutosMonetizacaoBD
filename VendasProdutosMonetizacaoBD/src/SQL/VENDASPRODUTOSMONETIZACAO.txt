CREATE TABLE CLIENTE(
CPF VARCHAR(11) PRIMARY KEY UNIQUE NOT NULL,
NOME VARCHAR(50) NOT NULL,
EMAIL VARCHAR(50) NOT NULL
);

CREATE TABLE CONTA(
CODIGO SERIAL PRIMARY KEY NOT NULL,
USUARIO VARCHAR(50) UNIQUE NOT NULL,
SALDO NUMERIC(10,2) NOT NULL,
CLIENTE VARCHAR(11) REFERENCES CLIENTE NOT NULL
);

CREATE TABLE VENDA(
CODIGO SERIAL PRIMARY KEY NOT NULL,
VALOR NUMERIC(10,2) NOT NULL,
DATA_VENDA TIMESTAMP NOT NULL,
COMPRADOR INTEGER REFERENCES CONTA NOT NULL
);

CREATE TABLE PRODUTO(
CODIGO SERIAL PRIMARY KEY NOT NULL,
NOME VARCHAR(50) NOT NULL,
PRECO NUMERIC(10,2) NOT NULL,
QTD INTEGER NOT NULL
);

CREATE TABLE MONETIZACAO(
CONTA INTEGER REFERENCES CONTA NOT NULL
);

CREATE TABLE VENDAS_PRODUTOS(
VENDA INTEGER REFERENCES VENDA NOT NULL,
PRODUTO INTEGER REFERENCES PRODUTO NOT NULL
);

CREATE TABLE CONTA_MONETIZACAO(
CONTA_TRANSFERIDOR INTEGER REFERENCES CONTA NOT NULL,
CONTA_TRANSFERIDO INTEGER REFERENCES CONTA
);

CREATE OR REPLACE FUNCTION INSERIR_CLIENTE(VARCHAR(50),VARCHAR(50),VARCHAR(50)) RETURNS VOID AS $$
DECLARE
    CLIENTES RECORD;
BEGIN
    SELECT INTO CLIENTES CPF FROM CLIENTE WHERE CPF = $1;
    IF CLIENTES IS NULL THEN
        INSERT INTO CLIENTE VALUES($1,$2,$3); 
    ELSE
        RAISE EXCEPTION 'Cliente já existe';
    END IF;
    RETURN;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION INSERIR_CONTA(VARCHAR(50),NUMERIC(10,2),INTEGER) RETURNS VOID AS $$
DECLARE
    CONTAS RECORD;
BEGIN
    SELECT INTO CONTAS USUARIO FROM CONTA WHERE USUARIO = $1;
    IF CONTAS IS NULL THEN
        INSERT INTO CONTA(USUARIO,SALDO,CLIENTE) VALUES($1,$2,$3);
    ELSE
        RAISE EXCEPTION 'Conta já existe';
    END IF;
    RETURN;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION INSERIR_PRODUTOS(VARCHAR(50),NUMERIC(10,2),INTEGER) RETURNS VOID AS $$
DECLARE
    PRODUTOS RECORD;
BEGIN
    IF $3 <> 0 THEN
        SELECT INTO PRODUTOS NOME FROM PRODUTO WHERE NOME = $1;
        IF PRODUTOS IS NULL THEN
            INSERT INTO PRODUTO(NOME,PRECO,QTD) VALUES($1,$2,$3);
        ELSE
            UPDATE PRODUTO SET QTD = QTD + $3 WHERE NOME = $1;
        END IF;
    ELSE
        RAISE EXCEPTION 'A quantidade do produto não pode ser zero';
    END IF;
    RETURN;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION DELETAR_PRODUTOS(VARCHAR(50)) RETURNS VOID AS $$
DECLARE
    PRODUTOS RECORD;
BEGIN
    UPDATE PRODUTO SET QTD = QTD - 1 WHERE NOME = $1;
    SELECT INTO PRODUTOS NOME,QTD FROM PRODUTO WHERE NOME = $1;
    IF PRODUTOS.QTD = 0 THEN
        DELETE FROM PRODUTO WHERE NOME = $1;
    END IF;
    RETURN;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION INSERIR_VENDA(INTEGER) RETURNS VOID AS $$
BEGIN
    INSERT INTO VENDA(VALOR,DATA_VENDA,COMPRADOR) VALUES(0,CURRENT_TIMESTAMP,$1);
    RETURN;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION INSERIR_VENDAS_PRODUTOS(VARCHAR(50)) RETURNS VOID AS $$
DECLARE
    CODIGO_VENDA RECORD;
    PRODUTO_NOME RECORD;
BEGIN
    SELECT INTO CODIGO_VENDA CODIGO FROM VENDA WHERE CODIGO = (SELECT MAX(CODIGO) FROM VENDA);
    SELECT INTO PRODUTO_NOME CODIGO FROM PRODUTO WHERE NOME = $1;
    INSERT INTO VENDAS_PRODUTOS VALUES(CODIGO_VENDA.CODIGO,PRODUTO_NOME.CODIGO);
    RETURN; 
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION COMPLETAR_VENDA(INTEGER) RETURNS VOID AS $$
DECLARE
    TEM_VENDA RECORD;
    CONTA_SALDO RECORD;
BEGIN
    SELECT INTO TEM_VENDA * FROM VENDAS_PRODUTOS JOIN VENDA USING(VENDA);
    SELECT INTO CONTA_SALDO * FROM CONTA;
    IF TEM_VENDA IS NULL THEN
        DELETE FROM VENDA WHERE CODIGO = (SELECT MAX(CODIGO) FROM VENDA);
    ELSE
        IF CONTA_SALDO.SALDO < TEM_VENDA.PRECO THEN
            DELETE FROM VENDA WHERE CODIGO = (SELECT MAX(CODIGO) FROM VENDA);
            RAISE NOTICE 'Saldo insuficiente';
        ELSE
            UPDATE CONTA SET SALDO = SALDO - TEM_VENDA.PRECO WHERE CODIGO = $1;
    END IF;
END;
$$ LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION VENDAS_PRODUTOS_GATILHO() RETURNS TRIGGER AS $VENDAS_PRODUTOS_GATILHO$
DECLARE
    VALORES RECORD;
BEGIN
    SELECT INTO VALORES P.PRECO FROM PRODUTO P WHERE CODIGO = NEW.PRODUTO;
    UPDATE VENDA  SET VALOR = VALOR+VALORES.PRECO WHERE CODIGO = (SELECT MAX(CODIGO) FROM VENDA);
    RETURN NEW;
END;
$VENDAS_PRODUTOS_GATILHO$ LANGUAGE 'plpgsql';

CREATE TRIGGER VENDAS_PRODUTOS_GATILHO AFTER INSERT ON INSERIR_VENDAS_PRODUTOS 
FOR EACH ROW EXECUTE PROCEDURE VENDAS_PRODUTOS_GATILHO();

CREATE OR REPLACE FUNCTION RETIRAR_SALDO(INTEGER,NUMERIC(10,2)) RETURNS VOID AS $$
DECLARE
    CONTAS RECORD;
BEGIN
    SELECT INTO CONTAS * FROM CONTA WHERE CODIGO = $1;
    IF CONTAS.SALDO < $2 THEN
        RAISE EXCEPTION 'Saldo insuficiente';
    ELSE
        UPDATE CONTA SET SALDO = SALDO - $2;
    END IF;
    RETURN;
END;
$$ LANGUAGE 'plpgsql';